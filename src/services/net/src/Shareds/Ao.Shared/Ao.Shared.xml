<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ao.Shared</name>
    </assembly>
    <members>
        <member name="T:Ao.Shared.AnalizingOptions">
            <summary>
            解析的可选项
            </summary>
        </member>
        <member name="P:Ao.Shared.AnalizingOptions.SkipConditions">
            <summary>
            解析跳过条件集合
            </summary>
        </member>
        <member name="T:Ao.Shared.ForView.BuildResualItem`1">
            <summary>
            表示创建视图后的结果
            </summary>
            <typeparam name="TView"></typeparam>
        </member>
        <member name="M:Ao.Shared.ForView.BuildResualItem`1.#ctor(`0,Ao.AoAnalizedPropertyItemBase)">
            <summary>
            初始化<see cref="T:Ao.Shared.ForView.BuildResualItem`1"/>
            </summary>
            <param name="view">目标视图</param>
            <param name="propertyItem">目标属性项</param>
        </member>
        <member name="P:Ao.Shared.ForView.BuildResualItem`1.View">
            <summary>
            视图结果
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.BuildResualItem`1.PropertyItem">
            <summary>
            属性项
            </summary>
        </member>
        <member name="T:Ao.Shared.ForView.BuildResualItemExtensions">
            <summary>
            对<see cref="T:Ao.Shared.ForView.BuildResualItem`1"/>的扩展
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.BuildResualItemExtensions.GetGroupName``1(Ao.Shared.ForView.BuildResualItem{``0})">
            <summary>
            查找属性的<see cref="T:Ao.Shared.ForView.GroupAttribute"/>并且获得组名，如果无返回null
            </summary>
            <typeparam name="TView"></typeparam>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.BulkBuildResual`1">
            <summary>
            表示分组后的批量视图结果
            </summary>
            <typeparam name="TView"></typeparam>
        </member>
        <member name="M:Ao.Shared.ForView.BulkBuildResual`1.#ctor">
            <summary>
            初始化<see cref="T:Ao.Shared.ForView.BulkBuildResual`1"/>
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.BulkBuildResual`1.Views">
            <summary>
            这一层的视图结果
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.BulkBuildResual`1.Next">
            <summary>
            下一些层
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.BulkBuildResual`1.All">
            <summary>
            全部的视图结果
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.BulkBuildResual`1.GetAll">
            <summary>
            获取这一层并且往后的所有视图结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.BulkBuildResual`1.GetEnumerator">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.BulkBuildResualExtensions">
            <summary>
            对<see cref="T:Ao.Shared.ForView.BulkBuildResual`1"/>的扩展
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.BulkBuildResualExtensions.GroupByName``1(Ao.Shared.ForView.BulkBuildResual{``0},System.String)">
            <summary>
            分组创建视图后的结果
            </summary>
            <typeparam name="TView"></typeparam>
            <param name="resual"></param>
            <param name="defaultName">默认组的名字</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.DynamicBuilder`1">
            <summary>
            <inheritdoc/>
            </summary>
            <typeparam name="TView"><inheritdoc/></typeparam>
        </member>
        <member name="M:Ao.Shared.ForView.DynamicBuilder`1.#ctor(Ao.IAoAnalizer,System.Object,Ao.Shared.ForView.IViewBuildable{`0},Ao.Shared.ForView.IViewWraper{`0})">
            <summary>
            初始化<see cref="T:Ao.Shared.ForView.DynamicBuilder`1"/>
            </summary>
            <param name="analizer">分析器</param>
            <param name="vm">视图模型</param>
            <param name="viewBuilders">视图建造器</param>
            <param name="viewWraper">视图装饰器</param>
        </member>
        <member name="P:Ao.Shared.ForView.DynamicBuilder`1.Analizer">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.DynamicBuilder`1.ViewBuilders">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.DynamicBuilder`1.Views">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.DynamicBuilder`1.With(System.Object,System.Boolean,Ao.Shared.AnalizingOptions,System.Predicate{Ao.AoAnalizedPropertyItemBase})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="obj"><inheritdoc/></param>
            <param name="deep"><inheritdoc/></param>
            <param name="options"><inheritdoc/></param>
            <param name="condition"><inheritdoc/></param>
        </member>
        <member name="M:Ao.Shared.ForView.DynamicBuilder`1.With(`0)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Ao.Shared.ForView.DynamicBuilder`1.ToList">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.DynamicBuilder`1.FromList(System.Collections.IList,System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="list"><inheritdoc/></param>
            <param name="deep"><inheritdoc/></param>
        </member>
        <member name="M:Ao.Shared.ForView.DynamicBuilder`1.Reset">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Ao.Shared.ForView.ForViewAttribute">
            <summary>
            这是指定属性使用哪一个view
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewAttribute.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Ao.Shared.ForView.ForViewAttribute"/>
            </summary>
            <param name="buildType"><inheritdoc cref="P:Ao.Shared.ForView.ForViewAttribute.BuildType"/></param>
        </member>
        <member name="P:Ao.Shared.ForView.ForViewAttribute.BuildType">
            <summary>
            建造类型
            </summary>
        </member>
        <member name="T:Ao.Shared.ForView.NoBuildHandle">
            <summary>
            建造失败时的处理器
            </summary>
            <param name="vm">视图模型</param>
            <param name="propertyItem">当前的属性项</param>
        </member>
        <member name="T:Ao.Shared.ForView.ForViewBuilder`1">
            <summary>
            根据<see cref="T:Ao.Shared.ForView.ForViewAttribute"/>和默认建造view
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.ForViewBuilder`1.ViewBuilders">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.ForViewBuilder`1.CustomBuilders">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.ForViewBuilder`1.Count">
            <summary>
            当前视图建造器的格式,<see cref="P:Ao.Shared.ForView.ForViewBuilder`1.ViewBuilders"/>
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.ForViewBuilder`1.StringProvider">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.ForViewBuilder`1.Item(System.Int32)">
            <summary>
            获取或设置当前集合的元素
            </summary>
            <param name="index">所在位置</param>
            <returns></returns>
        </member>
        <member name="E:Ao.Shared.ForView.ForViewBuilder`1.NoBuilt">
            <summary>
            触发会在建造失败时
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.#ctor">
            <summary>
            初始化<see cref="T:Ao.Shared.ForView.ForViewBuilder`1"/>
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.#ctor(Ao.Shared.ForView.Input.IStringProvider)">
            <summary>
            <inheritdoc cref="T:Ao.Shared.ForView.ForViewBuilder`1"/>
            </summary>
            <param name="stringProvider">字符串提供者</param>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.Build(System.Object,Ao.AoAnalizedPropertyItemBase)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="vm"><inheritdoc/></param>
            <param name="propertyItem"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.Add(Ao.Shared.ForView.IViewBuilder{`0})">
            <summary>
            添加一个视图建造者
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.Sort">
            <summary>
            对建造器进行排序
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.AddRange(System.Collections.Generic.IEnumerable{Ao.Shared.ForView.IViewBuilder{`0}})">
            <summary>
            添加一个视图建造者的集合
            </summary>
            <param name="builder">建造者的集合</param>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.AddRange(Ao.Shared.ForView.IViewBuilder{`0}[])">
            <summary>
            添加一个视图建造者的集合
            </summary>
            <param name="builder">建造者的集合</param>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.Remove(Ao.Shared.ForView.IViewBuilder{`0})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="builder"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.Clear">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.Contains(Ao.Shared.ForView.IViewBuilder{`0})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="item"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.CopyTo(Ao.Shared.ForView.IViewBuilder{`0}[],System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="array"><inheritdoc/></param>
            <param name="arrayIndex"><inheritdoc/></param>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.GetEnumerator">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.GetDynamicBuilder(Ao.IAoAnalizer,System.Object,Ao.Shared.ForView.IViewWraper{`0})">
            <summary>
            创建一个动态视图建造器
            </summary>
            <param name="analizer">分析器</param>
            <param name="vm">视图模型</param>
            <param name="viewWraper">视图包装器</param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.IndexOf(Ao.Shared.ForView.IViewBuilder{`0})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="item"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.Insert(System.Int32,Ao.Shared.ForView.IViewBuilder{`0})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="index"><inheritdoc/></param>
            <param name="item"><inheritdoc/></param>
        </member>
        <member name="M:Ao.Shared.ForView.ForViewBuilder`1.RemoveAt(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="index"><inheritdoc/></param>
        </member>
        <member name="T:Ao.Shared.ForView.GroupAttribute">
            <summary>
            表示一个组属性
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.GroupAttribute.GetValue(System.Object)">
            <summary>
            从目标实例获取一个组名
            </summary>
            <param name="inst">目标实例</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.IDynamicBuilder`1">
            <summary>
            表示一个动态视图器
            </summary>
            <typeparam name="TView">建造的视图类型</typeparam>
        </member>
        <member name="P:Ao.Shared.ForView.IDynamicBuilder`1.Analizer">
            <summary>
            当前引用的分析器
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.IDynamicBuilder`1.ViewBuilders">
            <summary>
            当前引用的视图建造器
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.IDynamicBuilder`1.Views">
            <summary>
            当前的视图集合
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.IDynamicBuilder`1.With(System.Object,System.Boolean,Ao.Shared.AnalizingOptions,System.Predicate{Ao.AoAnalizedPropertyItemBase})">
            <summary>
            在当前情况与上一个对象
            </summary>
            <param name="obj">对象</param>
            <param name="deep">是否深入解析,与<seealso cref="M:Ao.AoAnalizer.Analize(System.Object,System.Boolean,Ao.Shared.AnalizingOptions)"/>的deep一样</param>
            <param name="options">分析的可选项</param>
            <param name="condition">条件</param>
        </member>
        <member name="M:Ao.Shared.ForView.IDynamicBuilder`1.With(`0)">
            <summary>
            与上一个视图
            </summary>
            <param name="view">目标视图</param>
        </member>
        <member name="M:Ao.Shared.ForView.IDynamicBuilder`1.ToList">
            <summary>
            当前的对象生成一个列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.IDynamicBuilder`1.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.IDynamicBuilder`1.FromList(System.Collections.IList,System.Boolean)">
            <summary>
            加载一个对象列表，并且与上他们
            </summary>
            <param name="list">目标列表</param>
            <param name="deep">是否深入解析</param>
        </member>
        <member name="T:Ao.Shared.ForView.Input.IDisaplayable">
            <summary>
            表示可用显示的
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.Input.IDisaplayable.DisplayName">
            <summary>
            显示的名字
            </summary>
        </member>
        <member name="T:Ao.Shared.ForView.Input.IInitable`1">
            <summary>
            表示可以初始化的
            </summary>
            <typeparam name="TView"></typeparam>
        </member>
        <member name="P:Ao.Shared.ForView.Input.IInitable`1.PropertyItem">
            <summary>
            附加的属性项
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.Input.IInitable`1.Context">
            <summary>
            附加的上下文
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.Input.IInitable`1.Init(Ao.Shared.ForView.ViewBuildContext{`0},Ao.AoAnalizedPropertyItemBase)">
            <summary>
            初始化
            </summary>
            <param name="context"></param>
            <param name="propertyItem"></param>
        </member>
        <member name="T:Ao.Shared.ForView.Input.IStringProvider">
            <summary>
            表示字符串提供者
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.Input.IStringProvider.CultureInfo">
            <summary>
            表示字符串提供者的时区
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.Input.IStringProvider.GetString(System.String)">
            <summary>
            获取一个字符串
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.Input.StringKeyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.Input.StringKeyAttribute.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Ao.Shared.ForView.Input.StringKeyAttribute"/>
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Ao.Shared.ForView.Input.StringKeyAttribute.Key">
            <summary>
            字符串键
            </summary>
        </member>
        <member name="T:Ao.Shared.ForView.Input.StringProviderExtensions">
            <summary>
            对<see cref="T:Ao.Shared.ForView.Input.IStringProvider"/>的扩展
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.Input.StringProviderExtensions.Format(Ao.Shared.ForView.Input.IStringProvider,System.String,System.Object[])">
            <summary>
            格式化字符串
            </summary>
            <param name="stringProvider"></param>
            <param name="key">字符串键</param>
            <param name="paramters">装入参数</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.IValueProvider`1">
            <summary>
            表示值提供器
            </summary>
            <typeparam name="T">提供值的类型</typeparam>
        </member>
        <member name="M:Ao.Shared.ForView.IValueProvider`1.GetValue(System.Object)">
            <summary>
            获取一个值
            </summary>
            <param name="inst">目标值</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.IViewBuildable`1">
            <summary>
            表示可以建造视图
            </summary>
            <typeparam name="TView">目标视图</typeparam>
        </member>
        <member name="P:Ao.Shared.ForView.IViewBuildable`1.StringProvider">
            <summary>
            字符串提供者
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.IViewBuildable`1.ViewBuilders">
            <summary>
            当前的视图建造器集合
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.IViewBuildable`1.CustomBuilders">
            <summary>
            自定义视图建造器,对于特定类型
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.IViewBuildable`1.Build(System.Object,Ao.AoAnalizedPropertyItemBase)">
            <summary>
            创建一个视图
            </summary>
            <param name="vm">视图模型</param>
            <param name="propertyItem">实现项</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.IViewBuilder`1">
            <summary>
            视图建造器
            </summary>
            <typeparam name="TView">目标视图</typeparam>
        </member>
        <member name="P:Ao.Shared.ForView.IViewBuilder`1.Order">
            <summary>
            排序键
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.IViewBuilder`1.Condition(System.Type)">
            <summary>
            返回一个值，指示是否可用被建造
            </summary>
            <param name="type">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.IViewBuilder`1.BuildView(Ao.Shared.ForView.ViewBuildContext{`0},Ao.AoAnalizedPropertyItemBase)">
            <summary>
            建造视图
            </summary>
            <param name="context">上下文</param>
            <param name="propertyItem">目标属性</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.IViewConnectable">
            <summary>
            表示view可以与逻辑连接
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.IViewConnectable.Bind(System.Object,Ao.AoAnalizedPropertyItemBase)">
            <summary>
            绑定属性
            </summary>
            <param name="inst">属性的对象</param>
            <param name="propertyItem">解析后的属性</param>
        </member>
        <member name="T:Ao.Shared.ForView.IViewWraper`1">
            <summary>
            视图包装器
            </summary>
            <typeparam name="TView"></typeparam>
        </member>
        <member name="M:Ao.Shared.ForView.IViewWraper`1.Wraper(`0)">
            <summary>
            包装
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.KnowTypes">
            <summary>
            表示当前已知的类型
            </summary>
        </member>
        <member name="F:Ao.Shared.ForView.KnowTypes.EnumerableType">
            <summary>
            枚举类型<see cref="T:System.Collections.IEnumerable"/>
            </summary>
        </member>
        <member name="F:Ao.Shared.ForView.KnowTypes.IDictionaryType">
            <summary>
            字典类型<see cref="T:System.Collections.IDictionary"/>
            </summary>
        </member>
        <member name="F:Ao.Shared.ForView.KnowTypes.CollectionType">
            <summary>
            集合类型<see cref="T:System.Collections.ICollection"/>
            </summary>
        </member>
        <member name="F:Ao.Shared.ForView.KnowTypes.ValueTypes">
            <summary>
            值类型
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.KnowTypes.IsEmunerable(System.Type)">
            <summary>
            获取一个值，指示此类型是否为枚举类型
            </summary>
            <param name="type">目标类型，此参数不能为null</param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.KnowTypes.IsDictionay(System.Type)">
            <summary>
            获取一个值，指示此类型是否是字典类型
            </summary>
            <param name="type">目标类型</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.MethodForGroupAttribute">
            <summary>
            表示一个组名创建器
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.MethodForGroupAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化<see cref="T:Ao.Shared.ForView.MethodForGroupAttribute"/>
            </summary>
            <param name="methodName"><inheritdoc cref="P:Ao.Shared.ForView.MethodForGroupAttribute.MethodName"/></param>
            <param name="key"><inheritdoc cref="P:Ao.Shared.ForView.MethodForGroupAttribute.Key"/></param>
        </member>
        <member name="P:Ao.Shared.ForView.MethodForGroupAttribute.Key">
            <summary>
            参数键
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.MethodForGroupAttribute.MethodName">
            <summary>
            获取值调用的方法名，此方法必须是公开的并且是string (string)类型
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.MethodForGroupAttribute.GetValue(System.Object)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="inst"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.ValueGroupAttribute">
            <summary>
            表示固定值的组
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.ValueGroupAttribute.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Ao.Shared.ForView.ValueGroupAttribute"/>
            </summary>
            <param name="name"><inheritdoc cref="P:Ao.Shared.ForView.ValueGroupAttribute.Name"/></param>
        </member>
        <member name="P:Ao.Shared.ForView.ValueGroupAttribute.Name">
            <summary>
            组名
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.ValueGroupAttribute.GetValue(System.Object)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="inst"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.ViewBuildContext`1">
            <summary>
            视图创建的上下文
            </summary>
            <typeparam name="TView">视图类型,一般都说视图基类</typeparam>
        </member>
        <member name="M:Ao.Shared.ForView.ViewBuildContext`1.#ctor(System.Object,Ao.Shared.ForView.IViewBuildable{`0})">
            <summary>
            初始化<see cref="T:Ao.Shared.ForView.ViewBuildContext`1"/>
            </summary>
            <param name="vm">视图模型</param>
            <param name="viewBuilder">视图建造器</param>
        </member>
        <member name="P:Ao.Shared.ForView.ViewBuildContext`1.Vm">
            <summary>
            视图模型
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.ViewBuildContext`1.Feature">
            <summary>
            表示特性集合
            </summary>
        </member>
        <member name="P:Ao.Shared.ForView.ViewBuildContext`1.ViewBuilder">
            <summary>
            视图建造者
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.ViewBuildContext`1.GetString(Ao.AoAnalizedPropertyItemBase,System.String)">
            <summary>
            <inheritdoc cref="M:Ao.Shared.ForView.ViewBuildContext`1.GetString(System.String)"/>
            </summary>
            <param name="item">属性项</param>
            <param name="default">默认的值</param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.ViewBuildContext`1.GetString(Ao.AoAnalizedPropertyItemBase)">
            <summary>
            <inheritdoc cref="M:Ao.Shared.ForView.ViewBuildContext`1.GetString(System.String,System.String)"/>
            </summary>
            <param name="item">属性项</param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.ViewBuildContext`1.GetString(System.String)">
            <summary>
            表示从字符串提供者获取一个字符串,
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.ViewBuildContext`1.GetString(System.String,System.String)">
            <summary>
            <inheritdoc cref="M:Ao.Shared.ForView.ViewBuildContext`1.GetString(System.String)"/>
            </summary>
            <param name="key">资源键</param>
            <param name="default">默认值</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.ViewBuilderHelper">
            <summary>
            视图建造器的帮助<see cref="T:Ao.Shared.ForView.ForViewBuilder`1"/>
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.ViewBuilderHelper.Find``1(System.Reflection.Assembly)">
            <summary>
            从程序集寻找视图建造器
            </summary>
            <typeparam name="TView"></typeparam>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Ao.Shared.ForView.ViewBuilderHelper.FindFromExecuting``1">
            <summary>
            调用程序集，<inheritdoc cref="M:Ao.Shared.ForView.ViewBuilderHelper.Find``1(System.Reflection.Assembly)"/>
            </summary>
            <typeparam name="TView">视图类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.ForView.ViewModel.IFindable">
            <summary>
            表示可以被新增的
            </summary>
        </member>
        <member name="M:Ao.Shared.ForView.ViewModel.IFindable.Find(System.String)">
            <summary>
            搜寻
            </summary>
            <param name="key">搜索关键字</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.IAnalizeCondition">
            <summary>
            表示解析条件
            </summary>
        </member>
        <member name="M:Ao.Shared.IAnalizeCondition.Condition(Ao.IAoAnalizer,Ao.AoAnalizedPropertyItemBase)">
            <summary>
            返回一个值，指示当前是否可以被解析
            </summary>
            <param name="analizer">解析器</param>
            <param name="propertyItem">属性项</param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.PropertyAnalizeCondition">
            <summary>
            属性分析条件器
            </summary>
        </member>
        <member name="M:Ao.Shared.PropertyAnalizeCondition.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Ao.Shared.PropertyAnalizeCondition"/>
            </summary>
            <param name="propertyName"><inheritdoc cref="P:Ao.Shared.PropertyAnalizeCondition.PropertyName"/></param>
        </member>
        <member name="M:Ao.Shared.PropertyAnalizeCondition.#ctor(System.Type,System.String)">
            <summary>
            初始化<see cref="T:Ao.Shared.PropertyAnalizeCondition"/>
            </summary>
            <param name="targetType"><inheritdoc cref="P:Ao.Shared.PropertyAnalizeCondition.TargetType"/></param>
            <param name="propertyName"><inheritdoc cref="P:Ao.Shared.PropertyAnalizeCondition.PropertyName"/></param>
        </member>
        <member name="M:Ao.Shared.PropertyAnalizeCondition.#ctor(System.Type,System.Type,System.String)">
            <summary>
            初始化<see cref="T:Ao.Shared.PropertyAnalizeCondition"/>
            </summary>
            <param name="sourceType"><inheritdoc cref="P:Ao.Shared.PropertyAnalizeCondition.SourceType"/></param>
            <param name="targetType"><inheritdoc cref="P:Ao.Shared.PropertyAnalizeCondition.TargetType"/></param>
            <param name="propertyName"><inheritdoc cref="P:Ao.Shared.PropertyAnalizeCondition.PropertyName"/></param>
        </member>
        <member name="P:Ao.Shared.PropertyAnalizeCondition.SourceType">
            <summary>
            源类型，此值可以为null
            </summary>
        </member>
        <member name="P:Ao.Shared.PropertyAnalizeCondition.TargetType">
            <summary>
            目标类型，此值可以为null
            </summary>
        </member>
        <member name="P:Ao.Shared.PropertyAnalizeCondition.PropertyName">
            <summary>
            目标属性名
            </summary>
        </member>
        <member name="M:Ao.Shared.PropertyAnalizeCondition.Condition(Ao.IAoAnalizer,Ao.AoAnalizedPropertyItemBase)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="analizer"><inheritdoc/></param>
            <param name="propertyItem"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="T:Ao.Shared.TypeAnalizeCondition">
            <summary>
            类型解析条件
            </summary>
        </member>
        <member name="M:Ao.Shared.TypeAnalizeCondition.#ctor(System.Type)">
            <summary>
            初始化<see cref="T:Ao.Shared.TypeAnalizeCondition"/>
            </summary>
            <param name="targetType"><inheritdoc cref="P:Ao.Shared.TypeAnalizeCondition.TargetType"/></param>
        </member>
        <member name="P:Ao.Shared.TypeAnalizeCondition.TargetType">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="M:Ao.Shared.TypeAnalizeCondition.Condition(Ao.IAoAnalizer,Ao.AoAnalizedPropertyItemBase)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="analizer"><inheritdoc/></param>
            <param name="propertyItem"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="T:Ao.AoAnalizeContext">
            <summary>
            表示一个解析中的上下文
            </summary>
        </member>
        <member name="M:Ao.AoAnalizeContext.#ctor(System.Object)">
            <summary>
            初始化<see cref="T:Ao.AoAnalizeContext"/>
            </summary>
            <param name="source">目标源</param>
        </member>
        <member name="P:Ao.AoAnalizeContext.AnalizedObject">
            <summary>
            对于循环引用的对象，此实例为了防止此情况
            </summary>
        </member>
        <member name="T:Ao.AoAnalizedItem">
            <summary>
            表示正在分析中的数据项
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedItem.#ctor(System.Object)">
            <summary>
            初始化<see cref="T:Ao.AoAnalizedItem"/>
            </summary>
            <param name="source">目标源</param>
        </member>
        <member name="P:Ao.AoAnalizedItem.Source">
            <summary>
            目标源
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedItem.SourceType">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="T:Ao.AoAnalizedMethodItem">
            <summary>
            表示正在分析中的方法项
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedMethodItem.#ctor(System.Object,System.Reflection.MethodInfo)">
            <summary>
            初始化<see cref="T:Ao.AoAnalizedMethodItem"/>
            </summary>
            <param name="source">目标源</param>
            <param name="method">目标方法</param>
        </member>
        <member name="M:Ao.AoAnalizedMethodItem.InitInvoker">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ao.AoAnalizedMethodItemBase">
            <summary>
            表示正在分析中的方法项基类
            </summary>
        </member>
        <member name="F:Ao.AoAnalizedMethodItemBase.invoker">
            <summary>
            调用器
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedMethodItemBase.#ctor(System.Object)">
            <summary>
            初始化<see cref="T:Ao.AoAnalizedMethodItemBase"/>
            </summary>
            <param name="source">目标源</param>
        </member>
        <member name="P:Ao.AoAnalizedMethodItemBase.Method">
            <summary>
            引用的方法
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedMethodItemBase.Invoker">
            <summary>
            调用者
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedMethodItemBase.InitInvoker">
            <summary>
            调用初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ao.AoAnalizedPropertyItem">
            <summary>
            表示正在分析中的属性项
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItem.#ctor(System.Object)">
            <summary>
            初始化<see cref="T:Ao.AoAnalizedPropertyItem"/>
            </summary>
            <param name="source">目标源</param>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItem.#ctor(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            初始化<see cref="T:Ao.AoAnalizedPropertyItem"/>
            </summary>
            <param name="source">目标源</param>
            <param name="property">属性项</param>
        </member>
        <member name="P:Ao.AoAnalizedPropertyItem.Property">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedPropertyItem.ValueName">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedPropertyItem.ValueType">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItem.InitGetter">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItem.InitSetter">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItem.GetCustomAttribute``1">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItem.GetCustomAttributes``1">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Ao.AoAnalizedPropertyItemBase">
            <summary>
            表示正在分析的属性项基类
            </summary>
        </member>
        <member name="F:Ao.AoAnalizedPropertyItemBase.EmptySetter">
            <summary>
            表示默认的设置器
            </summary>
        </member>
        <member name="F:Ao.AoAnalizedPropertyItemBase.EmptyGetter">
            <summary>
            表示默认的取值器
            </summary>
        </member>
        <member name="F:Ao.AoAnalizedPropertyItemBase.getter">
            <summary>
            取值器
            </summary>
        </member>
        <member name="F:Ao.AoAnalizedPropertyItemBase.setter">
            <summary>
            设置器
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItemBase.#ctor(System.Object)">
            <summary>
            初始化<see cref="T:Ao.AoAnalizedPropertyItemBase"/>
            </summary>
            <param name="source">目标源</param>
        </member>
        <member name="P:Ao.AoAnalizedPropertyItemBase.ValueType">
            <summary>
            属性类型
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedPropertyItemBase.ValueName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedPropertyItemBase.Setter">
            <summary>
            属性设值器
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedPropertyItemBase.Getter">
            <summary>
            属性取值器
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedPropertyItemBase.CanSet">
            <summary>
            此属是否可以设值
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedPropertyItemBase.CanGet">
            <summary>
            此属性是否可以取值
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItemBase.InitGetter">
            <summary>
            初始化取值器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItemBase.InitSetter">
            <summary>
            初始化设置器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItemBase.GetCustomAttribute``1">
            <summary>
            从此属性获取一个特性
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItemBase.GetCustomAttributes``1">
            <summary>
            从此属性获取特性集合
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizedPropertyItemBase.ToString">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ao.AoAnalizedResual">
            <summary>
            表示分析的结果
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedResual.#ctor(System.Object)">
            <summary>
            初始化<see cref="T:Ao.AoAnalizedResual"/>
            </summary>
            <param name="source">目标源</param>
        </member>
        <member name="P:Ao.AoAnalizedResual.MemberItems">
            <summary>
            分析的这一层的属性项
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedResual.MethodItems">
            <summary>
            分析的这一层的方法项
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedResual.Nexts">
            <summary>
            下一些层
            </summary>
        </member>
        <member name="T:Ao.AoAnalizedListPropertyItem">
            <summary>
            表示列表属性的属性项
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedListPropertyItem.GenericType">
            <summary>
            表示列表泛型类型
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedListPropertyItem.Value">
            <summary>
            表示当前列表
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedListPropertyItem.ValueName">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Ao.AoAnalizedListPropertyItem.ValueType">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedListPropertyItem.#ctor(System.Collections.IEnumerable,System.String)">
            <summary>
            初始化<see cref="T:Ao.AoAnalizedListPropertyItem"/>
            </summary>
            <param name="source">目标集合</param>
            <param name="valueName">值名</param>
        </member>
        <member name="M:Ao.AoAnalizedListPropertyItem.InitGetter">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizedListPropertyItem.InitSetter">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ao.AoAnalizer">
            <summary>
            表示一个属性分析器
            </summary>
        </member>
        <member name="F:Ao.AoAnalizer.Default">
            <summary>
            默认的属性分析器，分析设置为默认
            </summary>
        </member>
        <member name="M:Ao.AoAnalizer.#ctor(Ao.AoAnalizeSettings)">
            <summary>
            初始化<see cref="T:Ao.AoAnalizer"/>
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Ao.AoAnalizer.#ctor">
            <summary>
            初始化<see cref="T:Ao.AoAnalizer"/>
            </summary>
        </member>
        <member name="P:Ao.AoAnalizer.Settings">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Ao.AoAnalizer.Analize(System.Object,System.Boolean,Ao.Shared.AnalizingOptions)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="inst"><inheritdoc/></param>
            <param name="deep"><inheritdoc/></param>
            <param name="options"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.DeepAnalize(Ao.AoAnalizeContext,System.Boolean,Ao.Shared.AnalizingOptions)">
            <summary>
            深入解析
            </summary>
            <param name="context">解析上下文</param>
            <param name="deep">是否深入</param>
            <param name="options">解析可选项</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.CanStepIn(Ao.AoAnalizeContext,Ao.AoAnalizedPropertyItemBase)">
            <summary>
            返回一个值，指示当前环境是否可用踏进
            </summary>
            <param name="context">解析上下文</param>
            <param name="propertyItem">属性项</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.AnalizePart(Ao.AoAnalizeContext,Ao.Shared.AnalizingOptions)">
            <summary>
            解析部分
            </summary>
            <param name="context">解析上下文</param>
            <param name="options">解析可选项</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.GenerateAnalizedPropertyItems(Ao.AoAnalizeContext,Ao.Shared.AnalizingOptions)">
            <summary>
            生成解析属性项集合
            </summary>
            <param name="context">解析上下文</param>
            <param name="options">解析可选项</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.GenerateAnalizedMethodItems(Ao.AoAnalizeContext)">
            <summary>
            生成解析方法项集合
            </summary>
            <param name="context">解析上下文</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.GetAndFilterMethods(Ao.AoAnalizeContext)">
            <summary>
            获取并筛选方法集合
            </summary>
            <param name="context">解析上下文</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.GetAndFilterProperties(Ao.AoAnalizeContext)">
            <summary>
            获取并筛选属性
            </summary>
            <param name="context">解析上下文</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.GeneratePropertyItem(Ao.AoAnalizeContext,System.Reflection.PropertyInfo)">
            <summary>
            生成属性项
            </summary>
            <param name="context">解析上下文</param>
            <param name="prop">属性信息</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.GenerateMethodItem(Ao.AoAnalizeContext,System.Reflection.MethodInfo)">
            <summary>
            生成方法项
            </summary>
            <param name="context">解析上下文</param>
            <param name="method">方法信息</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.MethodCanAnalize(System.Reflection.MethodInfo)">
            <summary>
            返回一个值，指示当前方法是否可以被解析
            </summary>
            <param name="m">方法信息</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoAnalizer.PropertyCanAnalize(System.Reflection.PropertyInfo)">
            <summary>
            返回一个值，指示属性是否可以被解析
            </summary>
            <param name="p">属性信息</param>
            <returns></returns>
        </member>
        <member name="T:Ao.AoAnalizeSettings">
            <summary>
            表示解析设置
            </summary>
        </member>
        <member name="P:Ao.AoAnalizeSettings.IgnoreWithoutUnit">
            <summary>
            如果为true，没有<see cref="T:Ao.AoUnitAttribute"/>就不解析
            </summary>
        </member>
        <member name="P:Ao.AoAnalizeSettings.IgnoreSelfLoop">
            <summary>
            忽略自循环
            </summary>
        </member>
        <member name="P:Ao.AoAnalizeSettings.IgnoreMutualReference">
            <summary>
            忽略互相引用
            </summary>
        </member>
        <member name="P:Ao.AoAnalizeSettings.NotStepInArray">
            <summary>
            不走进可枚举类型里
            </summary>
        </member>
        <member name="T:Ao.AoGrouper">
            <summary>
            表示分组器
            </summary>
        </member>
        <member name="M:Ao.AoGrouper.GroupResual(Ao.AoAnalizedResual)">
            <summary>
            从分析结果进行分组，或获取属性的<see cref="T:Ao.AoGroupingAttribute"/>特性进行分组
            </summary>
            <param name="resual">分析结果</param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoGrouper.GroupFromType(Ao.AoAnalizedResual)">
            <summary>
            从分析结果进行分组，或获取属性的类型名字进行分组
            </summary>
            <param name="resual"></param>
            <returns></returns>
        </member>
        <member name="T:Ao.AoGroupingAttribute">
            <summary>属性分组</summary>
        </member>
        <member name="M:Ao.AoGroupingAttribute.ToString">
            <summary>
            获取一个值，表示分组名
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ao.AoIgnoreAttribute">
            <summary>忽略解析</summary>
        </member>
        <member name="T:Ao.AoNameGroupAttribute">
            <summary>
            表示一个组名
            </summary>
        </member>
        <member name="F:Ao.AoNameGroupAttribute.DefaultGroupName">
            <summary>
            默认的组名
            </summary>
        </member>
        <member name="M:Ao.AoNameGroupAttribute.#ctor">
            <summary>
            初始化<see cref="T:Ao.AoNameGroupAttribute"/>
            </summary>
        </member>
        <member name="M:Ao.AoNameGroupAttribute.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Ao.AoNameGroupAttribute"/>，并且设定默认组名
            </summary>
            <param name="groupName">默认组名</param>
        </member>
        <member name="P:Ao.AoNameGroupAttribute.GroupName">
            <summary>
            组名
            </summary>
        </member>
        <member name="M:Ao.AoNameGroupAttribute.Equals(System.Object)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="obj"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="M:Ao.AoNameGroupAttribute.GetHashCode">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.AoNameGroupAttribute.ToString">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ao.AoNotStepInAttribute">
            <summary>
            表示此属性不能步入解析
            </summary>
        </member>
        <member name="M:Ao.AoNotStepInAttribute.CanStepIn(Ao.AoAnalizeContext,Ao.AoAnalizedPropertyItemBase)">
            <summary>
            表示当前情况是否可以踏入
            </summary>
            <param name="context">解析上下文</param>
            <param name="propertyItem">属性项</param>
            <returns></returns>
        </member>
        <member name="T:Ao.AoUnitAttribute">
            <summary>标识可解析单元</summary>
        </member>
        <member name="M:Ao.AoUnitAttribute.CanAnalize">
            <summary>是否可以被解析</summary>
        </member>
        <member name="T:Ao.AoAnalizedResualExtensions">
            <summary>
            对<see cref="T:Ao.AoAnalizedResual"/>的扩展
            </summary>
        </member>
        <member name="M:Ao.AoAnalizedResualExtensions.Build``1(Ao.AoAnalizedResual,System.Object,Ao.Shared.ForView.IViewBuildable{``0})">
            <summary>
            从解析后的结果批量创建视图
            </summary>
            <typeparam name="TView"></typeparam>
            <param name="resual"></param>
            <param name="vm">上下文模型</param>
            <param name="builder">创建器</param>
            <returns></returns>
        </member>
        <member name="T:Ao.GroupedResual">
            <summary>
            表示分组结果
            </summary>
        </member>
        <member name="F:Ao.GroupedResual.DefaultGroup">
            <summary>
            默认组
            </summary>
        </member>
        <member name="M:Ao.GroupedResual.#ctor">
            <summary>
            初始化<see cref="T:Ao.GroupedResual"/>
            </summary>
        </member>
        <member name="P:Ao.GroupedResual.Properties">
            <summary>
            分组后的属性
            </summary>
        </member>
        <member name="P:Ao.GroupedResual.Methods">
            <summary>
            分组后的方法
            </summary>
        </member>
        <member name="T:Ao.IAoAnalizer">
            <summary>
            表示解析器
            </summary>
        </member>
        <member name="P:Ao.IAoAnalizer.Settings">
            <summary>
            解析设置
            </summary>
        </member>
        <member name="M:Ao.IAoAnalizer.Analize(System.Object,System.Boolean,Ao.Shared.AnalizingOptions)">
            <summary>
            解析实例
            </summary>
            <param name="inst">目标实例</param>
            <param name="deep">是否递归解析，如果为false，则只浅解析</param>
            <param name="options">解析可选项</param>
            <returns></returns>
        </member>
        <member name="T:Ao.MethodAnalizedMethodItem">
            <summary>
            表示一个正在分析的方法项
            </summary>
        </member>
        <member name="M:Ao.MethodAnalizedMethodItem.#ctor(System.Object,Ao.AoMemberInvoker{System.Object})">
            <summary>
            初始化<see cref="T:Ao.MethodAnalizedMethodItem"/>
            </summary>
            <param name="source">目标源</param>
            <param name="invoker">方法调用器</param>
        </member>
        <member name="M:Ao.MethodAnalizedMethodItem.InitInvoker">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ao.MethodAoAnalizedPropertyItem">
            <summary>
            表示一个正在分析的方法项，此方法项是自定义的
            </summary>
        </member>
        <member name="M:Ao.MethodAoAnalizedPropertyItem.#ctor(System.Object,Ao.AoMemberGetter{System.Object},Ao.AoMemberSetter{System.Object})">
            <summary>
            初始化<see cref="T:Ao.MethodAoAnalizedPropertyItem"/>
            </summary>
            <param name="source">目标源</param>
            <param name="getter">取值器</param>
            <param name="setter">设置器</param>
        </member>
        <member name="P:Ao.MethodAoAnalizedPropertyItem.ValueType">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Ao.MethodAoAnalizedPropertyItem.ValueName">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Ao.MethodAoAnalizedPropertyItem.InitGetter">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ao.MethodAoAnalizedPropertyItem.InitSetter">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ao.AoMemberSetter`1">
            <summary>
            成员设置器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">目标值</param>
        </member>
        <member name="T:Ao.AoMemberGetter`1">
            <summary>
            成员取值器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>获取到的值</returns>
        </member>
        <member name="T:Ao.AoWithMemberGetter`1">
            <summary>
            固定对象成员取值器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="inst">获取源</param>
            <returns>获取到的值</returns>
        </member>
        <member name="T:Ao.AoMemberInvoker`1">
            <summary>
            成员调用器
            </summary>
            <typeparam name="T">目标值</typeparam>
            <param name="inst">目标对象</param>
            <param name="paramters">参数列表</param>
            <returns></returns>
        </member>
        <member name="T:Ao.AoMemberNewer`1">
            <summary>
            成员创建器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="paramters">参数列表</param>
            <returns></returns>
        </member>
        <member name="T:Ao.ReflectionHelper">
            <summary>
            反射帮助
            </summary>
        </member>
        <member name="M:Ao.ReflectionHelper.GetSetter``1(System.Object,System.Type,System.Reflection.MethodInfo)">
            <summary>
            获取一个设置器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="inst">目标对象</param>
            <param name="valueType">返回值</param>
            <param name="setter">取值方法信息</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GenerateChangeTypeExp(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            生成更改类型的表达式
            </summary>
            <param name="arg">目标表达式</param>
            <param name="dest">转值的表达式</param>
            <param name="targetType">更改到的类型</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetGetter``1(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <summary>
            获取一个取值器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="inst">实例表达式</param>
            <param name="getter">取值方法</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetGetter``1(System.Reflection.MethodInfo)">
            <summary>
            获取取值器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="getter">取值方法</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetGetter``1(System.Object,System.Reflection.MethodInfo)">
            <summary>
            获取取值器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="inst">目标源</param>
            <param name="getter">取值方法</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetGetter``1(System.Object,System.String)">
            <summary>
            获取取值器，从属性名
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="inst">目标对象</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetSetter``1(System.Object,System.String)">
            <summary>
            获取设置器，从属性名
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="inst">目标对象</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetInvoker``1(System.Reflection.ParameterInfo[],System.Type,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression},System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取调用器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="paramters">参数信息列表</param>
            <param name="returnType">返回值</param>
            <param name="caller">调用包装器</param>
            <param name="var"></param>
            <param name="newer"></param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetInvoker(System.Object,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            获取调用器
            </summary>
            <param name="inst">目标对象</param>
            <param name="method">方法信息</param>
            <param name="genericTypes">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetInvoker``2(System.Object,System.Reflection.MethodInfo,System.Type[])">
            <summary>
            获取调用器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <typeparam name="TReturn">返回值类型</typeparam>
            <param name="inst">目标对象</param>
            <param name="method">方法信息</param>
            <param name="genericTypes">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetInvoker``2(System.Object,System.String,System.Type[])">
            <summary>
            获取调用器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <typeparam name="TReturn">返回值类型</typeparam>
            <param name="inst">目标对象</param>
            <param name="methodName">方法名</param>
            <param name="genericTypes">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetInvoker(System.Object,System.Reflection.MethodInfo,System.Type,System.Type[])">
            <summary>
            获取调用器
            </summary>
            <param name="inst">目标对象</param>
            <param name="method">目标方法</param>
            <param name="returnType">返回类型</param>
            <param name="genericTypes">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetInvoker``1(System.Object,System.Reflection.MethodInfo,System.Type,System.Type[])">
            <summary>
            获取取值器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="inst">目标对象</param>
            <param name="method">目标方法</param>
            <param name="returnType">返回类型</param>
            <param name="genericTypes">泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetNewer(System.Type,System.Reflection.ConstructorInfo)">
            <summary>
            获取新建器
            </summary>
            <param name="targetType">目标类型</param>
            <param name="constructorInfo">构造函数</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetNewer(System.Type,System.Type[])">
            <summary>
            获取新建器
            </summary>
            <param name="targetType">目标类型</param>
            <param name="constructorPars">构造函数参数类型集合</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetNewer``1(System.Reflection.ConstructorInfo)">
            <summary>
            获取新建器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="constructorInfo">构造函数</param>
            <returns></returns>
        </member>
        <member name="M:Ao.ReflectionHelper.GetNewer``1(System.Type[])">
            <summary>
            获取新建器
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="constructorPars">构造函数参数类型集合</param>
            <returns></returns>
        </member>
    </members>
</doc>
